import express from "express";
import { bot } from "./bot";
import { loadItemsCache } from "./services/warframe-market";

const app = express();

// Initialize bot and services
async function startBot() {
  try {
    console.log('Loading Warframe Market cache...');
    await loadItemsCache();
    console.log('Warframe Market cache loaded successfully');

    console.log('Starting Telegram bot...');
    // –û—á–∏—Å—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    await bot.telegram.deleteWebhook({ drop_pending_updates: true }).catch(e => console.log('Webhook deletion failed (expected if not set):', e.message));
    await bot.launch({ dropPendingUpdates: true });
    console.log('Telegram bot started successfully');

    // Background cleanup for expired sessions
    setInterval(async () => {
      try {
        const { storage } = await import('./storage');
        const expiredSessions = await storage.getExpiredSessions();
        for (const session of expiredSessions) {
          console.log(`[Cleanup] Auto-completing expired session ${session.id} for user ${session.telegramId}`);
          await storage.updateSessionStatus(session.id, 'completed');
        }
      } catch (error) {
        console.error('Error during expired session cleanup:', error);
      }
    }, 5 * 60 * 1000); // Check every 5 minutes
  } catch (error: any) {
    console.error('Failed to start bot:', error);
    if (error.response?.error_code === 409) {
      console.log('Bot conflict detected. Exiting to avoid further conflicts...');
      process.exit(1); // –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
    }
    throw error; // –ü–µ—Ä–µ–¥–∞–¥–∏–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  }
}

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

// Root endpoint with instructions
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Warframe Inventory Analyzer Bot</title>
        <style>
            body { font-family: Arial, sans-serif; max-width: 800px; margin: 50px auto; padding: 20px; line-height: 1.6; }
            .header { text-align: center; margin-bottom: 40px; }
            .status { background: #e8f5e8; padding: 15px; border-radius: 8px; margin: 20px 0; }
            .instructions { background: #f0f8ff; padding: 20px; border-radius: 8px; margin: 20px 0; }
            .features { background: #fff8dc; padding: 20px; border-radius: 8px; margin: 20px 0; }
            code { background: #f4f4f4; padding: 2px 6px; border-radius: 3px; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>üéÆ Warframe Inventory Analyzer</h1>
            <p>Telegram –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å –ò–ò</p>
        </div>
        
        <div class="status">
            <h3>‚úÖ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞</h3>
            <p>–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤</p>
            <p>–ö–µ—à Warframe Market –∑–∞–≥—Ä—É–∂–µ–Ω: <strong>3610 –ø—Ä–µ–¥–º–µ—Ç–æ–≤</strong></p>
        </div>
        
        <div class="instructions">
            <h3>üì± –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å</h3>
            <p>–≠—Ç–æ <strong>Telegram –±–æ—Ç</strong>, –∞ –Ω–µ –≤–µ–±-—Å–∞–π—Ç! –î–ª—è —Ä–∞–±–æ—Ç—ã:</p>
            <ol>
                <li>–ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram –ø–æ —Ç–æ–∫–µ–Ω—É –∏–ª–∏ username</li>
                <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/start</code></li>
                <li>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã</li>
                <li>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è Warframe</li>
            </ol>
        </div>
        
        <div class="features">
            <h3>üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞</h3>
            <ul>
                <li><strong>üéØ –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤</strong> - —Å–∫—Ä–∏–Ω—à–æ—Ç—ã ‚Üí Excel —Ñ–∞–π–ª (–¥–æ 16 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤)</li>
                <li><strong>üìä –ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑</strong> - –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Å—Å–∏–π</li>
                <li><strong>üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Excel</strong> - –∏–º–ø–æ—Ä—Ç Excel + –Ω–æ–≤—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã</li>
                <li><strong>ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑</strong> - Gemini AI –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤</li>
                <li><strong>üí∞ –¶–µ–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</strong> - Warframe Market API</li>
                <li><strong>üìã Excel —ç–∫—Å–ø–æ—Ä—Ç</strong> - –≥–æ—Ç–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã —Å —Ü–µ–Ω–∞–º–∏</li>
            </ul>
        </div>
        
        <div class="status">
            <p><strong>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</strong> ${new Date().toLocaleString('ru-RU')}</p>
            <p><strong>–°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:</strong> –ü–æ–¥–∫–ª—é—á–µ–Ω–∞</p>
            <p><strong>Telegram Bot:</strong> –ê–∫—Ç–∏–≤–µ–Ω</p>
        </div>
    </body>
    </html>
  `);
});

// Start the server and bot
async function startServer() {
  // Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT. –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
  const port = process.env.PORT || 3000;

  try {
    // 1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã –æ–Ω –æ—Ç–∫—Ä—ã–ª –ø–æ—Ä—Ç.
    app.listen(port, '0.0.0.0', async () => {
      console.log(`Health check server running on port ${port}`);
      
      // 2. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞.
      // –¢–µ–ø–µ—Ä—å —ç—Ç–æ –Ω–µ –±—É–¥–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞.
      await startBot();
    });
  } catch (error) {
    console.error('Server startup failed:', error);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('SIGTERM received. Shutting down...');
  await bot.stop('SIGTERM');
  process.exit(0);
});
process.on('SIGINT', async () => {
  console.log('SIGINT received. Shutting down...');
  await bot.stop('SIGINT');
  process.exit(0);
});

startServer();