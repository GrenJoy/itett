import { Telegraf, Context, Markup } from 'telegraf';
import { storage } from './storage';
import { analyzeWarframeScreenshot } from './services/gemini';
import { generateExcelBuffer, parseExcelBuffer, generateTextContent } from './services/excel';
import { consolidateItems, consolidateNewItems } from './services/item-consolidation';
import { type InsertInventoryItem } from '@shared/schema';
import { processItemForMarket, getCorrectedItemName } from './services/warframe-market';
// –í–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞ bot.ts
const MAX_SCREENSHOTS_PER_SESSION = 16;
const MAX_FILE_SIZE = 2 * 1024 * 1024; // 2MB
const SESSION_TIMEOUT_MS = 60 * 60 * 1000; // 1 —á–∞—Å
const processingLock = new Set<string>();
const photoQueue = new Map<string, string[]>();
const cancellationRequests = new Set<string>(); // –î–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
function parseTextToItems(text: string): { name: string; quantity: number }[] {
  const lines = text.split('\n').filter(line => line.trim() !== '');
  
  return lines.map(line => {
    const parts = line.split('|');
    const name = parts[0].trim();
    const quantity = parts.length > 1 && !isNaN(parseInt(parts[1])) ? parseInt(parts[1].trim()) : 1;
    return { name, quantity };
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Å—Å–∏–∏
function cleanupSession(ctx: BotContext) {
  const telegramId = ctx.from?.id.toString();
  if (telegramId) {
    photoQueue.delete(telegramId);
    cancellationRequests.delete(telegramId);
    console.log(`[Cleanup] Cleared resources for user ${telegramId}`);
  }
  ctx.session = {};
}

// --- –§–£–ù–ö–¶–ò–Ø 2: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è "—Ñ–∞–±—Ä–∏–∫–∞" –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ---
async function processRawItems(ctx: BotContext, rawItems: { name: string; quantity: number }[]) {
  if (!ctx.session || !ctx.session.sessionId) {
    await ctx.reply('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start');
    return;
  }
  
  if (rawItems.length === 0) {
    await ctx.reply('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
    return;
  }
  
  const loadingMessage = await ctx.reply(`üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${rawItems.length}\n‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞—é —Ü–µ–Ω—ã...`);

  const consolidatedItems = new Map<string, InsertInventoryItem>();
  const unrecognizedItems: string[] = [];
  
  for (const rawItem of rawItems) {
    const correctedName = getCorrectedItemName(rawItem.name);
    
    if (correctedName) {
      if (consolidatedItems.has(correctedName)) {
        const existingItem = consolidatedItems.get(correctedName);
        if (existingItem) {
          existingItem.quantity = (existingItem.quantity || 0) + rawItem.quantity;
        }
      } else {
        const marketItem = await processItemForMarket(correctedName);
        const newItem: InsertInventoryItem = {
          sessionId: ctx.session.sessionId,
          name: correctedName,
          quantity: rawItem.quantity,
          slug: marketItem?.slug || null,
          sellPrices: marketItem?.sellPrices || [],
          buyPrices: marketItem?.buyPrices || [],
          avgSell: marketItem?.avgSell ? Math.round(marketItem.avgSell * 100) : 0,
          avgBuy: marketItem?.avgBuy ? Math.round(marketItem.avgBuy * 100) : 0,
          marketUrl: marketItem?.marketUrl || null,
          source: 'screenshot' as const // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–∫, —Ç.–∫. –∏—Å—Ç–æ—á–Ω–∏–∫ - —Å–µ—Å—Å–∏—è, –∞ –Ω–µ —Ñ–∞–π–ª
        };
        consolidatedItems.set(correctedName, newItem);
      }
    } else {
      unrecognizedItems.push(rawItem.name);
    }
  }

  const newEnrichedItems = Array.from(consolidatedItems.values());

  const existingItems = await storage.getItemsBySessionId(ctx.session.sessionId);
  const finalItems = consolidateItems(newEnrichedItems, existingItems);

  await storage.deleteItemsBySessionId(ctx.session.sessionId);
  await storage.createInventoryItems(finalItems);
  
  const finalTotalItems = await storage.getItemsBySessionId(ctx.session.sessionId);
    
  let responseText = `‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!\n`;
  responseText += `‚öôÔ∏è –û–ø–æ–∑–Ω–∞–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${newEnrichedItems.length}\n`;
  if (unrecognizedItems.length > 0) {
    responseText += `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø–æ–∑–Ω–∞—Ç—å: ${unrecognizedItems.length}\n`;
  }
  responseText += `üìã –í—Å–µ–≥–æ –≤ —Å–µ—Å—Å–∏–∏: ${finalTotalItems.length}\n\n`;

  if (unrecognizedItems.length > 0) {
    responseText += `*–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:*\n`;
    for (const itemName of unrecognizedItems.slice(0, 5)) {
      responseText += `‚Ä¢ \`${itemName}\`\n`;
    }
    if (unrecognizedItems.length > 5) {
      responseText += `...–∏ –µ—â–µ ${unrecognizedItems.length - 5}.\n`;
    }
    responseText += `\nüí° –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è, –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ \`–ù–∞–∑–≤–∞–Ω–∏–µ|–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\`, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤—Ä—É—á–Ω—É—é.\n`;
  }

  // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–∑–≤–∞–Ω–∏—è..."
  await ctx.deleteMessage(loadingMessage.message_id);

  // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤—Å–µ–≥–¥–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞)
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é', 'complete_session')],
    [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_session')]
  ]);
  await ctx.reply(responseText, { parse_mode: 'Markdown', ...keyboard });
}

interface BotContext extends Context {
  session?: {
    sessionId?: string;
    waitingForExcel?: boolean;
    waitingForPriceUpdate?: boolean;
    waitingForSplitPrice?: boolean;
    splitThreshold?: number;
    mode?: 'multishot' | 'edit' | 'price_update' | 'split_excel';
    screenshotProcessed?: boolean;
    screenshotCount?: number;
    lastExport?: {
      excel: string;
      text: string;
      itemsCount: number;
    }
  };
}

if (!process.env.TELEGRAM_BOT_TOKEN) {
  throw new Error('TELEGRAM_BOT_TOKEN is required');
}

const bot = new Telegraf<BotContext>(process.env.TELEGRAM_BOT_TOKEN);

const sessions = new Map<string, any>();
bot.use((ctx, next) => {
  const chatId = ctx.chat?.id.toString();
  if (chatId) {
    if (!sessions.has(chatId)) {
      sessions.set(chatId, {});
    }
    ctx.session = sessions.get(chatId);
  }
  return next();
});

// Start command
bot.start(async (ctx) => {
  const telegramId = ctx.from?.id.toString();
  if (!telegramId) {
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    return;
  }

  if (photoQueue.has(telegramId)) {
    cancellationRequests.add(telegramId);
    photoQueue.delete(telegramId);
    console.log(`[STOP] Forced stop of photo queue for user ${telegramId} via /start.`);
  }

  const existingSession = await storage.getActiveSessionByTelegramId(telegramId);
  if (existingSession) {
    const existingItems = await storage.getItemsBySessionId(existingSession.id);
    if (existingItems.length > 0) {
      await ctx.reply('‚è≥ –ó–∞–≤–µ—Ä—à–∞—é —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –∏ —Ñ–æ—Ä–º–∏—Ä—É—é Excel –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      try {
        const excelBuffer = await generateExcelBuffer(existingItems);
        await storage.updateSessionStatus(existingSession.id, 'completed');
        await ctx.replyWithDocument(
          { source: excelBuffer, filename: `inventory_${Date.now()}.xlsx` },
          { caption: `üìä –í–∞—à —á–∞—Å—Ç–∏—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\nüìä –ü—Ä–µ–¥–º–µ—Ç–æ–≤: ${existingItems.length}\n\nüÜï –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.` }
        );
      } catch (error) {
        console.error('Error generating Excel for forced completion:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞. –°–µ—Å—Å–∏—è –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞.');
        await storage.updateSessionStatus(existingSession.id, 'cancelled');
      }
    } else {
      await storage.updateSessionStatus(existingSession.id, 'cancelled');
      console.log(`[DB] Cancelled empty session ${existingSession.id} for user ${telegramId}`);
    }
    cleanupSession(ctx);
  }

  let user = await storage.getUserByTelegramId(telegramId);
  if (!user) {
    user = await storage.createUser({
      telegramId,
      username: ctx.from?.username,
      firstName: ctx.from?.first_name,
      lastName: ctx.from?.last_name,
    });
  }

  const mainKeyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é', 'create_session')],
    [Markup.button.callback('‚ùì –ü–æ–º–æ—â—å', 'help')]
  ]);

  await ctx.reply(
    'üéÆ *Warframe Inventory Analyzer*\n\n' +
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è Warframe!\n\n' +
    'üîç *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n' +
    '‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è\n' +
    '‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω —Å Warframe Market\n' +
    '‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Ñ–∞–π–ª—ã\n' +
    '‚Ä¢ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n' +
    '‚Ä¢ üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤ —Å—Ç–∞—Ä—ã—Ö Excel —Ñ–∞–π–ª–∞—Ö\n' +
    '‚Ä¢ üìä –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ Excel –ø–æ —Ü–µ–Ω–æ–≤—ã–º –ø–æ—Ä–æ–≥–∞–º\n' +
    '‚Ä¢ –°–æ–∑–¥–∞–ª: GrendematriX. –î–ª—è —Å–≤—è–∑–∏ discord:grenjoy\n\n' +
    '*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*',
    { parse_mode: 'Markdown', ...mainKeyboard }
  );
});

// Remove old handlers - they are now integrated into session flow

// Create session menu
bot.action('create_session', async (ctx) => {
  await ctx.answerCbQuery();
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üìä –ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑', 'mode_multishot')],
    [Markup.button.callback('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Excel', 'mode_edit')],
    [Markup.button.callback('üí∞ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –≤ Excel', 'mode_update_prices')],
    [Markup.button.callback('üìä –†–∞–∑–¥–µ–ª–∏—Ç—å Excel –ø–æ —Ü–µ–Ω–∞–º', 'mode_split_excel')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_menu')]
  ]);

  await ctx.editMessageText(
    'üéØ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ—Å—Å–∏–∏:*\n\n' +
    '*üìä –ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑*\n' +
    '–ù–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ ‚Üí –∑–∞–≤–µ—Ä—à–∞–µ—Ç–µ –∫–Ω–æ–ø–∫–æ–π\n' +
    '–õ–∏–º–∏—Ç: 16 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: 1 —á–∞—Å\n\n' +
    '*üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Excel*\n' +
    '–ó–∞–≥—Ä—É–∂–∞–µ—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Excel ‚Üí –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –Ω–æ–≤—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã ‚Üí –ø–æ–ª—É—á–∞–µ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª\n\n' +
    '*üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω*\n' +
    '–ó–∞–≥—Ä—É–∂–∞–µ—Ç–µ —Å—Ç–∞—Ä—ã–π Excel ‚Üí –ø–æ–ª—É—á–∞–µ—Ç–µ —Ñ–∞–π–ª —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏\n\n' +
    '*üìä –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ Excel*\n' +
    '–†–∞–∑–¥–µ–ª—è–µ—Ç–µ Excel —Ñ–∞–π–ª –ø–æ —Ü–µ–Ω–æ–≤—ã–º –ø–æ—Ä–æ–≥–∞–º –Ω–∞ –¥–≤–∞ —Ñ–∞–π–ª–∞\n\n' +
    '‚ÑπÔ∏è *–ö–∞–∂–¥–∞—è —Å–µ—Å—Å–∏—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–∞ –∏ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*',
    { parse_mode: 'Markdown', ...keyboard }
  );
});

// Mode selection handlers
bot.action('mode_multishot', async (ctx) => {
  await ctx.answerCbQuery();
  await startSession(ctx);
});

bot.action('mode_edit', async (ctx) => {
  await ctx.answerCbQuery();
  await startEditSession(ctx);
});

bot.action('mode_update_prices', async (ctx) => {
  await ctx.answerCbQuery();
  await startPriceUpdateSession(ctx);
});

bot.action('mode_split_excel', async (ctx) => {
  await ctx.answerCbQuery();
  await startSplitExcelSession(ctx);
});

// Back to menu handler
bot.action('back_to_menu', async (ctx) => {
  await ctx.answerCbQuery();
  
  const mainKeyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é', 'create_session')],
    [Markup.button.callback('‚ùì –ü–æ–º–æ—â—å', 'help')]
  ]);

  await ctx.editMessageText(
    'üéÆ *Warframe Inventory Analyzer*\n\n' +
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è Warframe!\n\n' +
    'üîç *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n' +
    '‚Ä¢ –ò–ò-–∞–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è\n' +
    '‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω —Å Warframe Market\n' +
    '‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Ñ–∞–π–ª—ã\n' +
    '‚Ä¢ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n' +
    '‚Ä¢ üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤ —Å—Ç–∞—Ä—ã—Ö Excel —Ñ–∞–π–ª–∞—Ö\n' +
    '‚Ä¢ üìä –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ Excel –ø–æ —Ü–µ–Ω–æ–≤—ã–º –ø–æ—Ä–æ–≥–∞–º\n' +
    '‚Ä¢ –°–æ–∑–¥–∞–ª: GrendematriX. –î–ª—è —Å–≤—è–∑–∏ discord:grenjoy\n\n' +
    '*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*',
    { parse_mode: 'Markdown', ...mainKeyboard }
  );
});

bot.action('help', async (ctx) => {
  await ctx.answerCbQuery(); // –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–ª—è—Ç—å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
  await ctx.editMessageText(
    'üìã *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:*\n\n' +
    '*üìä –ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º:*\n' +
    '‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ (–¥–æ 16 —à—Ç—É–∫)\n' +
    '‚Ä¢ –î–∞–Ω–Ω—ã–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞\n' +
    '‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Excel\n' +
    '‚Ä¢ –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n' +
    '*üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:*\n' +
    '‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Excel —Ñ–∞–π–ª\n' +
    '‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã (–¥–æ 16 —à—Ç—É–∫)\n' +
    '‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª\n\n' +
    '*üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω:*\n' +
    '‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç–∞—Ä—ã–π Excel —Ñ–∞–π–ª\n' +
    '‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏\n' +
    '‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏\n\n' +
    '*üìä –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ Excel:*\n' +
    '‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å —Ü–µ–Ω–∞–º–∏\n' +
    '‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä–æ–≥–æ–≤—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12)\n' +
    '‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ 2 —Ñ–∞–π–ª–∞: `high_price` –∏ `low_price`\n' +
    '‚Ä¢ –õ–æ–≥–∏–∫–∞: 3+ —Ü–µ–Ω—ã –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ ‚Üí `high_price`\n\n' +
    '*üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n' +
    '‚Ä¢ `/status` - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏\n\n' +
    '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, WEBP\n' +
    'Excel —Ñ–∞–π–ª—ã: .xlsx, .xls',
    { parse_mode: 'Markdown', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_menu')]]) }
  );
});

// Status command
bot.command('status', async (ctx) => {
  if (!ctx.session?.sessionId) {
    await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏');
    return;
  }

  try {
    const session = await storage.getSession(ctx.session.sessionId);
    const items = await storage.getItemsBySessionId(ctx.session.sessionId);
    
    let modeText = '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
    let maxScreenshots = 1;
    
    if (ctx.session.mode) {
      switch (ctx.session.mode) {
        case 'multishot':
          modeText = 'üìä –ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π';
          maxScreenshots = 16;
          break;
        case 'edit':
          modeText = 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ';
          maxScreenshots = 16;
          break;
      }
    } else if (session?.type) {
      switch (session.type) {
        case 'price_update':
          modeText = 'üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω';
          maxScreenshots = 0;
          break;
        case 'split_excel':
          modeText = 'üìä –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ Excel';
          maxScreenshots = 0;
          break;
      }
    }
    
    const screenshotCount = ctx.session.screenshotCount || 0;
    const sessionStatus = session?.status || '–∞–∫—Ç–∏–≤–Ω–∞';
    
    let statusMessage = `üìä *–°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏:*\n\n`;
    statusMessage += `üéÆ –†–µ–∂–∏–º: ${modeText}\n`;
    
    if (maxScreenshots > 0) {
      statusMessage += `üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${screenshotCount}/${maxScreenshots}\n`;
    }
    
    statusMessage += `üìã –ü—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Å–µ—Å—Å–∏–∏: ${items.length}\n`;
    statusMessage += `‚ö° –°—Ç–∞—Ç—É—Å: ${sessionStatus}\n`;
    
    if (ctx.session.waitingForExcel) {
      statusMessage += `üìé –û–∂–∏–¥–∞–Ω–∏–µ: Excel —Ñ–∞–π–ª\n`;
    } else if (ctx.session.waitingForPriceUpdate) {
      statusMessage += `üìé –û–∂–∏–¥–∞–Ω–∏–µ: Excel –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω\n`;
    } else if (ctx.session.waitingForSplitPrice) {
      statusMessage += `üìé –û–∂–∏–¥–∞–Ω–∏–µ: –ø–æ—Ä–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è\n`;
    }
    
    // Show some recent items if any
    if (items.length > 0) {
      statusMessage += `\nüéØ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã:*\n`;
      const recentItems = items.slice(-5);
      for (const item of recentItems) {
        statusMessage += `‚Ä¢ ${item.name} (${item.quantity})\n`;
      }
      if (items.length > 5) {
        statusMessage += `... –∏ –µ—â–µ ${items.length - 5} –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n`;
      }
    }
    
    await ctx.reply(statusMessage, { parse_mode: 'Markdown' });
    
  } catch (error) {
    console.error('Error getting session status:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏');
  }
});

bot.action('download_txt', async (ctx) => {
  // @ts-ignore
  const lastExport = ctx.session?.lastExport;
  if (!lastExport?.text) {
    await ctx.answerCbQuery('–î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.', { show_alert: true });
    await ctx.editMessageReplyMarkup(
      Markup.inlineKeyboard([[Markup.button.callback('üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é', 'create_session')]]).reply_markup
    );
    return;
  }
  await ctx.answerCbQuery();
  const textBuffer = Buffer.from(lastExport.text, 'utf-8');
  await ctx.replyWithDocument(
    { source: textBuffer, filename: `inventory_${Date.now()}.txt` },
    { caption: `üìã –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤ .txt\nüìä –ü—Ä–µ–¥–º–µ—Ç–æ–≤: ${lastExport.itemsCount}` }
  );
  ctx.session = {}; // –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –°–ï–°–°–ò–ò
  await ctx.editMessageText(
    `‚úÖ –§–∞–π–ª .txt –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.`,
    Markup.inlineKeyboard([[Markup.button.callback('üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é', 'create_session')]])
  );
});

bot.action('download_xlsx', async (ctx) => {
  await ctx.answerCbQuery();

  if (!ctx.session?.lastExport?.excel || !ctx.session?.sessionId) {
    await ctx.editMessageText(
      '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.',
      Markup.inlineKeyboard([[Markup.button.callback('üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é', 'create_session')]])
    );
    ctx.session = {};
    return;
  }

  const excelBuffer = Buffer.from(ctx.session.lastExport.excel, 'base64');
  const lastExport = ctx.session.lastExport;
  const sessionId = ctx.session.sessionId;

  // Complete session in database
  await storage.updateSessionStatus(sessionId, 'completed');

  // Send file
  await ctx.replyWithDocument(
    { source: excelBuffer, filename: `inventory_${Date.now()}.xlsx` },
    { caption: `üìä –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤ .xlsx\nüìä –ü—Ä–µ–¥–º–µ—Ç–æ–≤: ${lastExport.itemsCount}` }
  );

  // Reset session
  ctx.session = {};

  await ctx.editMessageText(
    `‚úÖ –§–∞–π–ª .xlsx –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.`,
    Markup.inlineKeyboard([[Markup.button.callback('üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é', 'create_session')]])
  );
});

bot.action('back_to_menu', async (ctx) => {
  await ctx.answerCbQuery();
  
  // Reset session state
  ctx.session = { sessionId: undefined, waitingForExcel: false, waitingForPriceUpdate: false, waitingForSplitPrice: false };
  
  const mainKeyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é', 'create_session')],
    [Markup.button.callback('‚ùì –ü–æ–º–æ—â—å', 'help')]
  ]);

  await ctx.editMessageText(
    'üéÆ *Warframe Inventory Analyzer*\n\n' +
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è Warframe!\n\n' +
    'üîç *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n' +
    '‚Ä¢ –ò–ò-–∞–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è\n' +
    '‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω —Å Warframe Market\n' +
    '‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Ñ–∞–π–ª—ã\n' +
    '‚Ä¢ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n' +
    '‚Ä¢ üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤ —Å—Ç–∞—Ä—ã—Ö Excel —Ñ–∞–π–ª–∞—Ö\n' +
    '‚Ä¢ üìä –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ Excel –ø–æ —Ü–µ–Ω–æ–≤—ã–º –ø–æ—Ä–æ–≥–∞–º\n' +
    '‚Ä¢ –°–æ–∑–¥–∞–ª: GrendematriX. –î–ª—è —Å–≤—è–∑–∏ discord:grenjoy\n\n' +
    '*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*',
    { parse_mode: 'Markdown', ...mainKeyboard }
  );
});

// Complete session handler
bot.action('complete_session', async (ctx) => {
  await completeSession(ctx);
});

// Cancel session handler
bot.action('cancel_session', async (ctx) => {
  const telegramId = ctx.from?.id.toString();
  if (telegramId) {
    cancellationRequests.add(telegramId);
    console.log(`[STOP] Cancellation requested for user ${telegramId} via button.`);
  }
  
  if (ctx.session?.sessionId) {
    await storage.updateSessionStatus(ctx.session.sessionId, 'cancelled');
  }
  
  cleanupSession(ctx);
  await ctx.answerCbQuery();
  await ctx.reply('‚ùå –°–µ—Å—Å–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–∏—â–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é.');
});

async function startSession(ctx: BotContext, mode: Session['type']) {
  const telegramId = ctx.from?.id.toString();
  if (!telegramId) return;

  // Cancel any existing active session
  const existingSession = await storage.getActiveSessionByTelegramId(telegramId);
  if (existingSession) {
    await storage.updateSessionStatus(existingSession.id, 'cancelled');
  }

  // Get user
  const user = await storage.getUserByTelegramId(telegramId);
  if (!user) return;

  // Create new multishot session
    const session = await storage.createSession({
    userId: (await storage.getUserByTelegramId(telegramId))!.id,
    telegramId,
    type: mode,
    status: 'active',
    // –ë–î —Å–∞–º–∞ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç photoLimit: 16 –¥–ª—è multishot/edit
    expiresAt: new Date(Date.now() + 60 * 60 * 1000) // 1 —á–∞—Å
  });

  if (!session || !session.id) {
    throw new Error('Failed to create session');
  }

  console.log('Created multishot session:', session);

  ctx.session!.sessionId = session.id;
  ctx.session!.mode = 'multishot';
  ctx.session!.screenshotProcessed = false;
  ctx.session!.screenshotCount = 0;
  ctx.session!.waitingForExcel = false;
  ctx.session!.waitingForPriceUpdate = false;
  ctx.session!.waitingForSplitPrice = false;

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é', 'complete_session')],
    [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_session')]
  ]);
  
  await ctx.editMessageText(
    `üéØ –ó–∞–ø—É—â–µ–Ω –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞\n\n` +
    `üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è Warframe\n` +
    `–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, WEBP\n` +
    `‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 16 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é\n` +
    `‚è∞ –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: 1 —á–∞—Å\n\n` +
    `üí° –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–æ —á–∞—Å—Ç—è–º –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ`,
    { parse_mode: 'Markdown', ...keyboard }
  );
}

async function startEditSession(ctx: BotContext) {
  const telegramId = ctx.from?.id.toString();
  if (!telegramId) return;

  // Cancel any existing active session
  const existingSession = await storage.getActiveSessionByTelegramId(telegramId);
  if (existingSession) {
    await storage.updateSessionStatus(existingSession.id, 'cancelled');
  }

  // Get user
  const user = await storage.getUserByTelegramId(telegramId);
  if (!user) return;

  // Create new session
  const session = await storage.createSession({
    userId: user.id,
    telegramId,
    type: 'edit',
    status: 'active',
    photoLimit: 16,
    expiresAt: new Date(Date.now() + 60 * 60 * 1000) // 1 hour from now
  });

  ctx.session!.sessionId = session.id;
  ctx.session!.waitingForExcel = true;
  ctx.session!.mode = 'edit';
  ctx.session!.screenshotCount = 0;

  const keyboard = Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_session')]]);

  await ctx.editMessageText(
    'üìù –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Excel\n\n' +
    'üìÑ –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª (.xlsx), –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ä–∞–Ω–µ–µ –≤—ã–≥—Ä—É–∑–∏–ª–∏ –∏–∑ –±–æ—Ç–∞. –§–∞–π–ª—ã .txt –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç.\n' +
    '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã\n' +
    '‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 16 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é',
    { parse_mode: 'Markdown', ...keyboard }
  );
}

async function startPriceUpdateSession(ctx: BotContext) {
  const telegramId = ctx.from?.id.toString();
  if (!telegramId) return;

  // Cancel any existing active session
  const existingSession = await storage.getActiveSessionByTelegramId(telegramId);
  if (existingSession) {
    await storage.updateSessionStatus(existingSession.id, 'cancelled');
  }

  // Get user
  const user = await storage.getUserByTelegramId(telegramId);
  if (!user) return;

  // Create new session
  const session = await storage.createSession({
    userId: user.id,
    telegramId,
    type: 'price_update',
    status: 'active',
    photoLimit: 0, // No photo processing for price updates
    expiresAt: new Date(Date.now() + 60 * 60 * 1000) // 1 hour from now
  });

  ctx.session!.sessionId = session.id;
  ctx.session!.waitingForExcel = true;
  ctx.session!.waitingForPriceUpdate = true;

  const keyboard = Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_session')]]);

  await ctx.editMessageText(
    'üí∞ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤ Excel —Ñ–∞–π–ª–µ*\n\n' +
    'üìã *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n' +
    '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º\n' +
    '2. –ë–æ—Ç –∏–∑–≤–ª–µ—á–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n' +
    '3. –ü–æ–ª—É—á–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã —Å Warframe Market\n' +
    '4. –í–µ—Ä–Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Excel —Å –Ω–æ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏\n' +
    '5. –°–µ—Å—Å–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∏ –æ—á–∏—Å—Ç–∏—Ç—Å—è\n\n' +
    'üìé *–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω:*',
    { parse_mode: 'Markdown', ...keyboard }
  );
}

async function startSplitExcelSession(ctx: BotContext) {
  const telegramId = ctx.from?.id.toString();
  if (!telegramId) return;

  // Cancel any existing active session
  const existingSession = await storage.getActiveSessionByTelegramId(telegramId);
  if (existingSession) {
    await storage.updateSessionStatus(existingSession.id, 'cancelled');
  }

  // Get user
  const user = await storage.getUserByTelegramId(telegramId);
  if (!user) return;

  // Create new session
  const session = await storage.createSession({
    userId: user.id,
    telegramId,
    type: 'split_excel',
    status: 'active',
    photoLimit: 0, // No photo processing for Excel splitting
    expiresAt: new Date(Date.now() + 60 * 60 * 1000) // 1 hour from now
  });

  ctx.session!.sessionId = session.id;
  ctx.session!.waitingForExcel = true;
  ctx.session!.waitingForSplitPrice = false;

  const keyboard = Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_session')]]);

  await ctx.editMessageText(
    'üìä *–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ Excel –ø–æ —Ü–µ–Ω–∞–º*\n\n' +
    'üìã *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n' +
    '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º\n' +
    '2. –£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä–æ–≥–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è\n' +
    '3. –ü–æ–ª—É—á–∏—Ç–µ 2 —Ñ–∞–π–ª–∞: high_price.xlsx –∏ low_price.xlsx\n\n' +
    'üí° *–õ–æ–≥–∏–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è:*\n' +
    '‚Ä¢ –ï—Å–ª–∏ —É –ø—Ä–µ–¥–º–µ—Ç–∞ 3+ —Ü–µ–Ω—ã –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ ‚Üí –ø–æ–ø–∞–¥–∞–µ—Ç –≤ high_price\n' +
    '‚Ä¢ –ò–Ω–∞—á–µ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ low_price\n\n' +
    'üìé *–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª:*',
    { parse_mode: 'Markdown', ...keyboard }
  );
}



async function completeSession(ctx: BotContext) {
  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }
  if (!ctx.session?.sessionId) {
    await ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.');
    return;
  }

  const sessionId = ctx.session.sessionId;
  const session = await storage.getSession(sessionId);
  // –í–°–¢–ê–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
  if (!session || session.status !== 'active') {
    await ctx.reply('‚ùå –°–µ—Å—Å–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    cleanupSession(ctx);
    return;
  }

  const items = await storage.getItemsBySessionId(sessionId);

  // –ò—Å–∫–ª—é—á–∞–µ–º split_excel –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  if (session?.type === 'split_excel') {
    await ctx.reply('‚ùå –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è Excel –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–≤–æ–¥ –ø–æ—Ä–æ–≥–æ–≤–æ–π —Ü–µ–Ω—ã.');
    return;
  }

  if (items.length === 0) {
    await ctx.reply('‚ùå –í —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    await storage.updateSessionStatus(sessionId, 'completed');
    cleanupSession(ctx);
    return;
  }

  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel-—Ñ–∞–π–ª
    const excelBuffer = await generateExcelBuffer(items);
    const MAX_FILE_SIZE = 2 * 1024 * 1024;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ Excel-—Ñ–∞–π–ª–∞
    if (excelBuffer.byteLength > MAX_FILE_SIZE) {
      const fileSizeMB = (excelBuffer.byteLength / (1024 * 1024)).toFixed(2);
      await storage.updateSessionStatus(sessionId, 'completed');

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
      let textContent;
      try {
        textContent = generateTextContent(items);
      } catch (error) {
        console.error('Error generating text content:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.');
        cleanupSession(ctx);
        return;
      }

      const textBuffer = Buffer.from(textContent, 'utf-8');

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
      if (textBuffer.byteLength > MAX_FILE_SIZE) {
        const textFileSizeMB = (textBuffer.byteLength / (1024 * 1024)).toFixed(2);
        const tooLargeMessage = `‚ö†Ô∏è *–§–∞–π–ª—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ!*\n\n` +
          `üìä –ü—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Å–µ—Å—Å–∏–∏: ${items.length}\n` +
          `üìÅ –†–∞–∑–º–µ—Ä Excel: ${fileSizeMB} MB (–º–∞–∫—Å. 2 MB)\n` +
          `üìÑ –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: ${textFileSizeMB} MB (–º–∞–∫—Å. 2 MB)\n\n` +
          `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n` +
          `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.\n\n` +
          `–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤.`;

        if (ctx.callbackQuery) {
          await ctx.editMessageText(tooLargeMessage, {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard([[Markup.button.callback('üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é', 'create_session')]])
          });
        } else {
          await ctx.reply(tooLargeMessage, {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard([[Markup.button.callback('üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é', 'create_session')]])
          });
        }
        cleanupSession(ctx);
        return;
      }

      cleanupSession(ctx);

      const tooLargeMessage = `‚ö†Ô∏è *–§–∞–π–ª Excel —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!*\n\n` +
        `üìä –ü—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Å–µ—Å—Å–∏–∏: ${items.length}\n` +
        `üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileSizeMB} MB (–º–∞–∫—Å. 2 MB)\n\n` +
        `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n` +
        `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.\n` +
        `‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.\n\n` +
        `–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`;

      if (ctx.callbackQuery) {
        await ctx.editMessageText(tooLargeMessage, {
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([[Markup.button.callback('üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é', 'create_session')]])
        });
      } else {
        await ctx.reply(tooLargeMessage, {
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([[Markup.button.callback('üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é', 'create_session')]])
        });
      }

      await ctx.replyWithDocument(
        { source: textBuffer, filename: `inventory_${Date.now()}.txt` },
        { caption: `üìã –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤ .txt (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)\nüìä –ü—Ä–µ–¥–º–µ—Ç–æ–≤: ${items.length}` }
      );
      return;
    }

    // All sessions now use multishot logic
    // Logic for all session types (multishot, edit, price_update)
    let textContent;
      try {
        textContent = generateTextContent(items);
      } catch (error) {
        console.error('Error generating text content:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å Excel.');
        cleanupSession(ctx);
        return;
      }

      const textBuffer = Buffer.from(textContent, 'utf-8');
      if (textBuffer.byteLength > MAX_FILE_SIZE) {
        const textFileSizeMB = (textBuffer.byteLength / (1024 * 1024)).toFixed(2);
        await storage.updateSessionStatus(sessionId, 'completed');
        cleanupSession(ctx);

        const tooLargeMessage = `‚ö†Ô∏è *–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!*\n\n` +
          `üìä –ü—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Å–µ—Å—Å–∏–∏: ${items.length}\n` +
          `üìÑ –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: ${textFileSizeMB} MB (–º–∞–∫—Å. 2 MB)\n\n` +
          `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n` +
          `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.\n\n` +
          `–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤.`;

        if (ctx.callbackQuery) {
          await ctx.editMessageText(tooLargeMessage, {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard([[Markup.button.callback('üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é', 'create_session')]])
          });
        } else {
          await ctx.reply(tooLargeMessage, {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard([[Markup.button.callback('üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é', 'create_session')]])
          });
        }
        return;
      }

      if (ctx.session) {
        ctx.session.lastExport = {
          excel: excelBuffer.toString('base64'),
          text: textContent,
          itemsCount: items.length
        };
      }
      await storage.updateSessionStatus(sessionId, 'completed');

      const keyboard = Markup.inlineKeyboard([
        Markup.button.callback('üìÑ –°–∫–∞—á–∞—Ç—å .txt', 'download_txt'),
        Markup.button.callback('üìä –°–∫–∞—á–∞—Ç—å .xlsx', 'download_xlsx')
      ]);

      let messageText = `‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${items.length}.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:`;
      if (session?.type === 'price_update') {
        messageText = `‚úÖ –¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${items.length}.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:`;
      }

      if (ctx.callbackQuery) {
        await ctx.editMessageText(messageText, { reply_markup: keyboard.reply_markup });
      } else {
        await ctx.reply(messageText, keyboard);
      }
  } catch (error) {
    console.error('Error completing session:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.');
  } finally {
    cleanupSession(ctx);
  }
}

// Handle photos
async function processPhotoQueue(ctx: BotContext) {
  const telegramId = ctx.from?.id.toString();
  
  if (!telegramId || !ctx.session || !ctx.session.sessionId) {
    console.error(`[Photo Queue] Session not initialized for user ${telegramId}`);
    await ctx.reply('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.');
    return;
  }

  if (processingLock.has(telegramId)) {
    console.log(`[Photo Queue] Already processing for user ${telegramId}`);
    return;
  }

  const originalSessionId = ctx.session.sessionId;

  // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ —Ü–∏–∫–ª–æ–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  const sessionData = await storage.getSession(originalSessionId);
  if (!sessionData || sessionData.status !== 'active') {
    await ctx.reply('‚ùå –°–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞. –û—á–µ—Ä–µ–¥—å —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞.');
    cleanupSession(ctx);
    return;
  }
  
  const MAX_SCREENSHOTS = sessionData.photoLimit || 16;
  if (MAX_SCREENSHOTS === 0) {
    console.error(`[Photo Queue] Invalid photo limit for user ${telegramId}: ${ctx.session.mode}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º —Å–µ—Å—Å–∏–∏. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.');
    return;
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
  processingLock.add(telegramId);
  console.log(`[Photo Queue] Started processing for user ${telegramId}, limit: ${MAX_SCREENSHOTS}`);

  try {
    while (photoQueue.has(telegramId) && photoQueue.get(telegramId)!.length > 0) {
      // –ü–†–û–í–ï–†–ö–ê ‚Ññ1: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ —Ñ–ª–∞–≥—É
      if (cancellationRequests.has(telegramId)) {
        cancellationRequests.delete(telegramId);
        photoQueue.delete(telegramId);
        console.log(`[Worker] Processing stopped for ${telegramId} due to cancellation request.`);
        break;
      }

      // –ü–†–û–í–ï–†–ö–ê ‚Ññ2: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
      // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 5 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
      const currentScreenshotCount = ctx.session?.screenshotCount || 0;
      if (currentScreenshotCount % 5 === 0) {
        const currentSession = await storage.getSession(originalSessionId);
        if (!currentSession || currentSession.status !== 'active') {
          await ctx.reply('‚ùå –°–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞. –û—á–µ—Ä–µ–¥—å —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞.');
          cleanupSession(ctx);
          break;
        }
      }

      // –ü–†–û–í–ï–†–ö–ê ‚Ññ3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å)
      if ((ctx.session?.screenshotCount || 0) >= MAX_SCREENSHOTS) {
        console.log(`[Worker] Screenshot limit reached for user ${telegramId}, completing session`);
        photoQueue.delete(telegramId);
        await completeSession(ctx);
        break;
      }

      const fileId = photoQueue.get(telegramId)!.shift()!;

      // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π try...catch –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –û–î–ù–û–ì–û —Ñ–æ—Ç–æ
      try {
        console.log(`[Worker] Processing photo for user ${telegramId}, mode: ${ctx.session.mode}, screenshotCount: ${(ctx.session.screenshotCount || 0) + 1}/${MAX_SCREENSHOTS}`);
        const remainingInQueue = photoQueue.get(telegramId)?.length || 0;
        const loadingMessage = await ctx.reply(`üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∫—Ä–∏–Ω—à–æ—Ç... (${remainingInQueue} –≤ –æ—á–µ—Ä–µ–¥–∏)`);

        if (ctx.session) {
          ctx.session.screenshotCount = (ctx.session.screenshotCount || 0) + 1;
        }

        const fileInfo = await ctx.telegram.getFile(fileId);
        const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${fileInfo.file_path}`;
        const response = await fetch(fileUrl);
        const buffer = await response.arrayBuffer();
        const base64Image = Buffer.from(buffer).toString('base64');
        const rawExtractedItems = await analyzeWarframeScreenshot(base64Image);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (cancellationRequests.has(telegramId)) {
          await ctx.deleteMessage(loadingMessage.message_id);
          continue;
        }

        if (rawExtractedItems.length === 0) {
          await ctx.deleteMessage(loadingMessage.message_id);
          await ctx.reply('‚ùå –ù–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ Warframe.');
          continue;
        }

        await ctx.telegram.editMessageText(ctx.chat!.id, loadingMessage.message_id, undefined, `üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${rawExtractedItems.length}\n‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞—é —Ü–µ–Ω—ã...`);

        const consolidatedItems = new Map<string, InsertInventoryItem>();
        const unrecognizedItems: string[] = [];

        for (const rawItem of rawExtractedItems) {
          if (cancellationRequests.has(telegramId)) break;

          const correctedName = getCorrectedItemName(rawItem.name);
          if (correctedName) {
            if (consolidatedItems.has(correctedName)) {
              const existingItem = consolidatedItems.get(correctedName);
              if (existingItem) {
                existingItem.quantity = (existingItem.quantity || 0) + rawItem.quantity;
              }
            } else {
              const marketItem = await processItemForMarket(correctedName);
              if (cancellationRequests.has(telegramId)) break;

              const newItem: InsertInventoryItem = {
                sessionId: originalSessionId,
                name: correctedName,
                quantity: rawItem.quantity,
                slug: marketItem?.slug || null,
                sellPrices: marketItem?.sellPrices || [],
                buyPrices: marketItem?.buyPrices || [],
                avgSell: marketItem?.avgSell ? Math.round(marketItem.avgSell * 100) : 0,
                avgBuy: marketItem?.avgBuy ? Math.round(marketItem.avgBuy * 100) : 0,
                marketUrl: marketItem?.marketUrl || null,
                source: 'screenshot' as const
              };
              consolidatedItems.set(correctedName, newItem);
            }
          } else {
            unrecognizedItems.push(rawItem.name);
            console.log(`[Corrector] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è: "${rawItem.name}"`);
          }
        }

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –≤ –ë–î
        if (cancellationRequests.has(telegramId)) {
          await ctx.deleteMessage(loadingMessage.message_id);
          continue;
        }

        const newEnrichedItems = Array.from(consolidatedItems.values());
        const existingItems = await storage.getItemsBySessionId(originalSessionId);
        const finalItems = consolidateItems(newEnrichedItems, existingItems);

        await storage.deleteItemsBySessionId(originalSessionId);
        await storage.createInventoryItems(finalItems);
        const finalTotalItems = await storage.getItemsBySessionId(originalSessionId);

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        let responseText = `‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n`;
        responseText += `üìä –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ: ${rawExtractedItems.length}\n`;
        responseText += `‚öôÔ∏è –ò–∑ –Ω–∏—Ö –æ–ø–æ–∑–Ω–∞–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${newEnrichedItems.length}\n`;
        responseText += `üìã –í—Å–µ–≥–æ –≤ —Å–µ—Å—Å–∏–∏: ${finalTotalItems.length}\n`;
        responseText += `üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${ctx.session.screenshotCount}/${MAX_SCREENSHOTS}\n\n`;

        if (unrecognizedItems.length > 0) {
          responseText += `‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø–æ–∑–Ω–∞—Ç—å ${unrecognizedItems.length} –ø—Ä–µ–¥–º–µ—Ç(–æ–≤):*\n`;
          for (const itemName of unrecognizedItems.slice(0, 5)) {
            responseText += `‚Ä¢ \`${itemName}\`\n`;
          }
          if (unrecognizedItems.length > 5) {
            responseText += `...–∏ –µ—â–µ ${unrecognizedItems.length - 5}.\n`;
          }
          responseText += `\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ \`–ù–∞–∑–≤–∞–Ω–∏–µ|–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\`, –Ω–∞–ø—Ä–∏–º–µ—Ä: \`–ê–∫—Ü–µ–ª—å—Ç—Ä–∞ –ü—Ä–∞–π–º –°—Ç–≤–æ–ª|1\`.\n\n`;
        }

        const itemsToShow = newEnrichedItems.slice(0, 5);
        if (itemsToShow.length > 0) {
          responseText += 'üéØ –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n';
          for (const item of itemsToShow) {
            responseText += `‚Ä¢ ${item.name} (${item.quantity})\n`;
          }
          if (newEnrichedItems.length > 5) {
            responseText += `... –∏ –µ—â–µ ${newEnrichedItems.length - 5} –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n`;
          }
        } else if (unrecognizedItems.length === 0) {
          responseText += '‚ùå –ù–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø–æ–∑–Ω–∞—Ç—å.\n';
        }

        await ctx.deleteMessage(loadingMessage.message_id);

        if ((ctx.session?.screenshotCount || 0) >= MAX_SCREENSHOTS) {
          await ctx.reply(responseText + `\n‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (${MAX_SCREENSHOTS}). –ó–∞–≤–µ—Ä—à–∞—é —Å–µ—Å—Å–∏—é...`, { parse_mode: 'Markdown' });
          await completeSession(ctx);
        } else {
          const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é', 'complete_session')],
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_session')]
          ]);
          await ctx.reply(responseText, { parse_mode: 'Markdown', ...keyboard });
        }
      } catch (error: any) {
        console.error(`[Photo] Error analyzing screenshot for user ${telegramId}:`, error);
        if (error.message?.includes('ApiError')) {
          await ctx.reply('‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        } else {
          await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
      }
    }
  } finally {
    processingLock.delete(telegramId);
    if (cancellationRequests.has(telegramId)) {
      cancellationRequests.delete(telegramId);
    }
    console.log(`[Photo Queue] Finished processing for user ${telegramId}`);
  }
}

bot.on('photo', async (ctx) => {
  const telegramId = ctx.from?.id.toString();
  if (!telegramId) return;

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
  if (!ctx.session?.sessionId) {
    await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.');
    return;
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è Excel
  if (ctx.session.waitingForExcel) {
    await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã.');
    return;
  }

  // 3. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –ë–î
  const session = await storage.getSession(ctx.session.sessionId);
  if (!session) {
    await ctx.reply('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    cleanupSession(ctx);
    return;
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏
  if (session.expiresAt && new Date() > session.expiresAt) {
    await ctx.reply('‚è∞ –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ó–∞–≤–µ—Ä—à–∞—é...');
    await completeSession(ctx);
    return;
  }

  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º photoLimit –∏–∑ –ë–î)
  const currentQueueSize = photoQueue.get(telegramId)?.length || 0;
  const processedCount = ctx.session.screenshotCount || 0;
  const totalPhotos = processedCount + currentQueueSize + 1;

  if (session.photoLimit > 0 && totalPhotos > session.photoLimit) {
    await ctx.reply(
      `üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ${session.photoLimit} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.\n` +
      `(–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}, –≤ –æ—á–µ—Ä–µ–¥–∏: ${currentQueueSize})`
    );
    await completeSession(ctx);
    return;
  }

  // 6. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
  const fileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
  
  if (!photoQueue.has(telegramId)) {
    photoQueue.set(telegramId, []);
  }
  photoQueue.get(telegramId)!.push(fileId);

  // 7. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const queuePosition = photoQueue.get(telegramId)!.length;
  await ctx.reply(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å (${queuePosition} –≤ –æ–∂–∏–¥–∞–Ω–∏–∏)`);

  // 8. –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å–ª–∏ –Ω–µ –∑–∞–Ω—è—Ç–æ
  if (!processingLock.has(telegramId)) {
    await processPhotoQueue(ctx);
  }
});

// Handle documents (Excel files)
bot.on('document', async (ctx) => {
  if (!ctx.session?.sessionId || !ctx.session.waitingForExcel) {
    await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π /start');
    return;
  }

  // Get session to determine mode
  const session = await storage.getSession(ctx.session.sessionId);
  
  // Handle price update mode
  if (session?.type === 'price_update') {
    await handlePriceUpdateDocument(ctx);
    return;
  }

  // Handle split Excel mode
  if (session?.type === 'split_excel') {
    await handleSplitExcelDocument(ctx);
    return;
  }

  // Handle edit mode (existing functionality)

  const document = ctx.message.document;
  const fileName = document.file_name || '';
  
  if (!fileName.match(/\.(xlsx?|xls)$/i)) {
    await ctx.reply('‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã (.xlsx, .xls)');
    return;
  }

  try {
    await ctx.reply('üìÑ –ó–∞–≥—Ä—É–∂–∞—é Excel —Ñ–∞–π–ª...');
    
    // Download file
    const fileInfo = await ctx.telegram.getFile(document.file_id);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${fileInfo.file_path}`;
    
    const response = await fetch(fileUrl);
    const buffer = Buffer.from(await response.arrayBuffer());

    // Parse Excel file
    const excelItems = await parseExcelBuffer(buffer);
    
    if (excelItems.length === 0) {
      await ctx.reply('‚ùå Excel —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
      return;
    }

    // Convert to inventory items and enrich with market data when possible
    const inventoryItems: InsertInventoryItem[] = [];
    
    await ctx.reply(`üîÑ –û–±–æ–≥–∞—â–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Warframe Market...`);
    
    for (const item of excelItems) {
      let marketItem = null;
      
      // Try to find market data by Russian name
      try {
        marketItem = await processItemForMarket(item.name);
      } catch (error) {
        console.warn(`Could not find market data for Excel item: ${item.name}`);
      }
      
      inventoryItems.push({
        sessionId: ctx.session!.sessionId!,
        name: item.name,
        slug: marketItem?.slug || null,
        quantity: item.quantity,
        sellPrices: typeof item.sellPrices === 'string' ? item.sellPrices.split(',').map((p: string) => parseFloat(p.trim())).filter((p: number) => !isNaN(p)) : (marketItem?.sellPrices || []),
        buyPrices: typeof item.buyPrices === 'string' ? item.buyPrices.split(',').map((p: string) => parseFloat(p.trim())).filter((p: number) => !isNaN(p)) : (marketItem?.buyPrices || []),
        avgSell: item.avgSell ? Math.round(item.avgSell * 100) : (marketItem?.avgSell ? Math.round(marketItem.avgSell * 100) : 0),
        avgBuy: item.avgBuy ? Math.round(item.avgBuy * 100) : (marketItem?.avgBuy ? Math.round(marketItem.avgBuy * 100) : 0),
        marketUrl: item.marketUrl || marketItem?.marketUrl || null,
        source: 'excel' as const
      });
    }

    // Save to database
    await storage.createInventoryItems(inventoryItems);

    ctx.session.waitingForExcel = false;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é', 'complete_session')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_session')]
    ]);

    await ctx.reply(
      `‚úÖ Excel —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!\n` +
      `üìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${excelItems.length}\n\n` +
      `üì∏ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤`,
      keyboard
    );

  } catch (error) {
    console.error('Error processing Excel file:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.');
  }
});



// Handle price update document processing
async function handlePriceUpdateDocument(ctx: BotContext) {
  if (!ctx.session?.sessionId) {
    await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏');
    return;
  }

  const document = (ctx.message as any)?.document;
  const fileName = document?.file_name || '';
  
  if (!fileName.match(/\.(xlsx?|xls)$/i)) {
    await ctx.reply('‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã (.xlsx, .xls)');
    return;
  }

  try {
    await ctx.reply('üìÑ –ó–∞–≥—Ä—É–∂–∞—é Excel —Ñ–∞–π–ª...');
    
    // Download file
    const fileInfo = await ctx.telegram.getFile(document!.file_id);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${fileInfo.file_path}`;
    
    const response = await fetch(fileUrl);
    const buffer = Buffer.from(await response.arrayBuffer());

    // Parse Excel file to extract names and quantities
    const excelItems = await parseExcelBuffer(buffer);
    
    if (excelItems.length === 0) {
      await ctx.reply('‚ùå Excel —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
      return;
    }

    await ctx.reply(`üîÑ –û–±–Ω–æ–≤–ª—è—é —Ü–µ–Ω—ã –¥–ª—è ${excelItems.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤...`);
    
    // Convert to inventory items and enrich with market data
    const inventoryItems: InsertInventoryItem[] = [];
    
    for (const item of excelItems) {
      const marketItem = await processItemForMarket(item.name);
      
      inventoryItems.push({
        sessionId: ctx.session.sessionId,
        name: item.name,
        slug: marketItem?.slug || null,
        quantity: item.quantity,
        sellPrices: marketItem?.sellPrices || [],
        buyPrices: marketItem?.buyPrices || [],
        avgSell: marketItem?.avgSell ? Math.round(marketItem.avgSell * 100) : 0,
        avgBuy: marketItem?.avgBuy ? Math.round(marketItem.avgBuy * 100) : 0,
        marketUrl: marketItem?.marketUrl || null,
        source: 'excel' as const
      });
    }

    // Save to database with session isolation
    await storage.createInventoryItems(inventoryItems);

    // Generate Excel with fresh prices (inventoryItems will be converted internally)
    const items = await storage.getItemsBySessionId(ctx.session.sessionId);
    const updatedBuffer = await generateExcelBuffer(items);

    // Auto-complete the price update session
    await completeSession(ctx);

  } catch (error) {
    console.error('Error updating prices:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç Excel —Ñ–∞–π–ª–∞.');
  }
}

// Handle split Excel document processing
async function handleSplitExcelDocument(ctx: BotContext) {
  if (!ctx.session?.sessionId) {
    await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏');
    return;
  }

  const document = (ctx.message as any)?.document;
  const fileName = document?.file_name || '';
  
  if (!fileName.match(/\.(xlsx?|xls)$/i)) {
    await ctx.reply('‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã (.xlsx, .xls)');
    return;
  }

  try {
    await ctx.reply('üìÑ –ó–∞–≥—Ä—É–∂–∞—é Excel —Ñ–∞–π–ª...');
    
    // Download file
    const fileInfo = await ctx.telegram.getFile(document!.file_id);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${fileInfo.file_path}`;
    
    const response = await fetch(fileUrl);
    const buffer = Buffer.from(await response.arrayBuffer());

    // Parse Excel file
    const excelItems = await parseExcelBuffer(buffer);
    
    if (excelItems.length === 0) {
      await ctx.reply('‚ùå Excel —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
      return;
    }

    // Convert to inventory items and enrich with market data
    const inventoryItems: InsertInventoryItem[] = [];
    
    await ctx.reply(`üîÑ –û–±–æ–≥–∞—â–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Warframe Market...`);
    
    for (const item of excelItems) {
      let marketItem = null;
      
      // Try to find market data by Russian name
      try {
        marketItem = await processItemForMarket(item.name);
      } catch (error) {
        console.warn(`Could not find market data for Excel item: ${item.name}`);
      }
      
      // Get 5 current sell prices from market
      const sellPrices = marketItem?.sellPrices?.slice(0, 5) || [];
      
      inventoryItems.push({
        sessionId: ctx.session!.sessionId!,
        name: item.name,
        slug: marketItem?.slug || null,
        quantity: item.quantity,
        sellPrices: sellPrices, // Use fresh market data
        buyPrices: marketItem?.buyPrices || [],
        avgSell: marketItem?.avgSell ? Math.round(marketItem.avgSell * 100) : 0,
        avgBuy: marketItem?.avgBuy ? Math.round(marketItem.avgBuy * 100) : 0,
        marketUrl: marketItem?.marketUrl || null,
        source: 'excel' as const
      });
    }

    // Save to database
    await storage.createInventoryItems(inventoryItems);
    
    ctx.session.waitingForExcel = false;
    ctx.session.waitingForSplitPrice = true;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_session')]
    ]);

    await ctx.reply(
      `‚úÖ Excel —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!\n` +
      `üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${excelItems.length}\n\n` +
      `üí∞ –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è:\n` +
      `–ù–∞–ø—Ä–∏–º–µ—Ä: 12\n\n` +
      `üí° –ü—Ä–µ–¥–º–µ—Ç—ã —Å –ø–æ—Ä–æ–≥–æ–º —Ä–∞–≤–Ω–æ–º—É –∏–ª–∏ –≤—ã—à–µ –≤–∞—à–µ–º—É –ø–æ–ø–∞–¥—É—Ç –≤ high_price.xlsx`,
      keyboard
    );

  } catch (error) {
    console.error('Error processing split Excel file:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.');
  }
}

// Handle Excel splitting logic
async function handleExcelSplit(ctx: BotContext) {
  if (!ctx.session?.sessionId || ctx.session.splitThreshold === undefined) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è');
    return;
  }

  try {
    await ctx.reply(`üîÑ –†–∞–∑–¥–µ–ª—è—é Excel –ø–æ –ø–æ—Ä–æ–≥—É ${ctx.session.splitThreshold} –ø–ª–∞—Ç–∏–Ω—ã...`);

    const sessionId = ctx.session.sessionId;
    const threshold = ctx.session.splitThreshold;
    const items = await storage.getItemsBySessionId(sessionId);

    const highPriceItems: typeof items = [];
    const lowPriceItems: typeof items = [];

    for (const item of items) {
      const sellPrices = Array.isArray(item.sellPrices) ? item.sellPrices : [];
      // Take first 5 sell prices and check how many are >= threshold
      const first5Prices = sellPrices.slice(0, 5);
      const pricesAboveThreshold = first5Prices.filter(price => price >= threshold);
      
      // If 3 or more prices are above threshold, move to high_price
      if (pricesAboveThreshold.length >= 3) {
        highPriceItems.push(item);
      } else {
        lowPriceItems.push(item);
      }
    }

    // Generate Excel files
    const highPriceBuffer = await generateExcelBuffer(highPriceItems);
    const lowPriceBuffer = await generateExcelBuffer(lowPriceItems);

    // Complete session and cleanup
    await storage.updateSessionStatus(sessionId, 'completed');
    ctx.session = {};

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é', 'create_session')]
    ]);

    await ctx.reply(
      `‚úÖ Excel —Ä–∞–∑–¥–µ–ª–µ–Ω!\n` +
      `üìä –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${items.length}\n` +
      `üìà –í—ã—Å–æ–∫–∏–µ —Ü–µ–Ω—ã (${threshold}+): ${highPriceItems.length}\n` +
      `üìâ –ù–∏–∑–∫–∏–µ —Ü–µ–Ω—ã (<${threshold}): ${lowPriceItems.length}\n\n` +
      `üìé –í–∞—à–∏ —Ñ–∞–π–ª—ã:`,
      keyboard
    );
    
    // Send both Excel files
    await ctx.replyWithDocument(
      { source: highPriceBuffer, filename: `high_price_${threshold}p_${Date.now()}.xlsx` },
      { caption: `üìà –ü—Ä–µ–¥–º–µ—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ü–µ–Ω–∞–º–∏ (${threshold}+ –ø–ª–∞—Ç–∏–Ω—ã)\nüìä –ü—Ä–µ–¥–º–µ—Ç–æ–≤: ${highPriceItems.length}` }
    );

    await ctx.replyWithDocument(
      { source: lowPriceBuffer, filename: `low_price_${threshold}p_${Date.now()}.xlsx` },
      { caption: `üìâ –ü—Ä–µ–¥–º–µ—Ç—ã —Å –Ω–∏–∑–∫–∏–º–∏ —Ü–µ–Ω–∞–º–∏ (<${threshold} –ø–ª–∞—Ç–∏–Ω—ã)\nüìä –ü—Ä–µ–¥–º–µ—Ç–æ–≤: ${lowPriceItems.length}` }
    );

  } catch (error) {
    console.error('Error splitting Excel:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞.');
  }
}

// Handle text messages (for split price threshold)
bot.on('text', async (ctx) => {
  const telegramId = ctx.from?.id.toString();
  if (!telegramId || !ctx.session?.sessionId) {
    await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.');
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  const session = await storage.getSession(ctx.session.sessionId);
  if (!session || session.status !== 'active') {
    ctx.session = {};
    await ctx.reply('‚ùå –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é.');
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä–æ–≥–∞ —Ü–µ–Ω—ã –¥–ª—è split_excel
  if (ctx.session?.waitingForSplitPrice) {
    const priceText = ctx.message.text.trim();
    const price = parseFloat(priceText);
    if (isNaN(price) || price <= 0) {
      await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.');
      return;
    }
    ctx.session.splitThreshold = price;
    ctx.session.waitingForSplitPrice = false;
    await handleExcelSplit(ctx);
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ä–µ–∂–∏–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º
  if (!ctx.session?.sessionId || (ctx.session.mode !== 'multishot' && ctx.session.mode !== 'edit')) {
    if (!ctx.message.text.startsWith('/')) {
      await ctx.reply('üí° –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã —Ç–µ–∫—Å—Ç–æ–º, –Ω–∞—á–Ω–∏—Ç–µ —Å–µ—Å—Å–∏—é "–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑" –∏–ª–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Excel".');
    }
    return;
  }

  try {
    const loadingMessage = await ctx.reply('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à —Ç–µ–∫—Å—Ç...');

    // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –≤–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    const itemsFromText = parseTextToItems(ctx.message.text);

    if (itemsFromText.length === 0) {
      await ctx.deleteMessage(loadingMessage.message_id);
      await ctx.reply('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n' + 'üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ|–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n' + '–í–∏—Å–ø –ü—Ä–∞–π–º: –ö–∞—Ä–∫–∞—Å|2\n–°–µ–≤–∞–≥–æ—Ç –ü—Ä–∞–π–º: –°–∏—Å—Ç–µ–º–∞|1' );
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é –≤–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ processRawItems
    await processRawItems(ctx, itemsFromText);

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ, —Ç–∞–∫ –∫–∞–∫ processRawItems —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç
    await ctx.deleteMessage(loadingMessage.message_id);

  } catch (error) {
    console.error('Error processing text input:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.');
  }
});


// Error handling
bot.catch((err, ctx) => {
  console.error('Bot error:', err);
  ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
});

export { bot };
